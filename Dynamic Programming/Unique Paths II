class Solution {
    public int helperFunction(int[][] Grid,int m,int n,int [][] dp){
        if(m<0 || n<0 || Grid[m][n]==1) return 0;
        if(m==0 && n==0) return 1;
        if(dp[m][n]!=-1) return dp[m][n];
            
            int up= m>0 ?helperFunction(Grid,m-1,n,dp):0;
            
            int left= n>0?helperFunction(Grid,m,n-1,dp):0;
            return dp[m][n]=up+left;
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;
        int [][] dp=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
    return helperFunction(obstacleGrid,m-1,n-1,dp);
    }
}
